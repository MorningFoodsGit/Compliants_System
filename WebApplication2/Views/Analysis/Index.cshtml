@model List<WebApplication2.Models.ViewModels.AnalysisViewModel>
    ViewData["Title"] = "Index";
}
<!-- Recent invoice with Statistics -->
@await Component.InvokeAsync("Menu", new { activeMenuItem = "Complaints Reports" })
<!-- / main menu-->
<div class="app-content content container-fluid">
    <div class="content-wrapper">
        <div class="content-header row"></div>
        <div class="content-body">
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"><i class="icon-stats-bars2"></i> Complaints Report</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li>
                           <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Retailer</button>
                        <div class="dropdown-menu">
                        <a class="dropdown-item"  aria-controls="dropdown2" aria-expanded="true">By order Accending</a>
                        <a class="dropdown-item"  aria-controls="dropdown2" aria-expanded="true">By order Decending</a>
                        <a class="dropdown-item"  aria-controls="dropdown2" aria-expanded="true">By order Retailer</a>
                        <a class="dropdown-item"  aria-controls="dropdown2" aria-expanded="true">By order Site</a>
                        <a class="dropdown-item"  aria-controls="dropdown2" aria-expanded="true">By order Product Catergory</a>
                        <a class="dropdown-item"  aria-controls="dropdown2" aria-expanded="true">By order Compliant Catergory</a>
                        </div>
                        </li>
                        <li>
                            <a data-action="collapse"><i class="icon-minus4"></i></a>
                        </li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        <li><a data-action="close"><i class="icon-cross2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse in">
                <div class="card-block">
                    <p class="card-text"> Number of complaints for each retailer per product category.</p>
                    <div class="table-responsive" style="max-height: 250px; overflow-y: auto;">
                    <table class="table table-striped mb-0">
                        <thead>
                           <tr>
                             <th>Retailer</th>
                            @foreach (var category in Model.Select(x => x.Category).Distinct())
                            {
                            <th>@category</th>
                            }
                           </tr>
                        </thead>
                        <tbody>
                          @foreach (var retailerGroup in Model.GroupBy(x => x.Retailer))
                          {
                         <tr>
                         <td>@(retailerGroup.Key)</td>
                         @foreach (var category in Model.Select(x => x.Category).Distinct())
                          {
                           var count = retailerGroup.FirstOrDefault(x => x.Category == category)?.Count ?? 0;
                           <td>@count</td>
                          }
                         </tr>
                          }
                        </tbody>
                    </table>
                </div>
                <br/>
                    <p class="card-text"> Visual representation of complaints count.</p>
                    <div class="chart-container">
                        <div id="stacked-bar-chart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Bar Chart</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        <li><a data-action="close"><i class="icon-cross2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse in">
                <div class="card-block">                   
                    <div class="chart-container" style="width: 80%; margin: auto; height: 80%;" Height="400px" width="200px">
                        <div id="chart_div" style="width: 100%; height: 400px;"></div>
                        <div id="bar-chart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ReportsScriptsPartial");
	}
    <script>
       google.load('visualization', '1.0', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.setOnLoadCallback(drawBarStacked);

   // Callback that creates and populates a data table, instantiates the pie chart, passes in the data and draws it.
    function drawBarStacked() {

    // Create the data table.
    var data = google.visualization.arrayToDataTable([
        ['Genre', 'MornFlake', 'ALDI', 'LIDL', 'Asda', 'Co-op', 'Sainsbury', 'Tesco', { role: 'annotation' }],
        ['Crisp', 10, 15, 25, 35, 45, 23, 45, ''],
        ['Flake', 12, 20, 25, 32, 36, 34, 55, ''],
        ['Granola', 5, 24, 20, 34, 17, 24, 32, ''],
        ['Muesli', 18, 25, 30, 38, 24, 13, 21, ''],
        ['Oats', 16, 22, 23, 28, 15, 22, 36, ''],
        ['Pots', 8, 26, 20, 42, 30, 31, 40, ''],
        ['Sachets', 24, 17, 24, 35, 14, 37, 19, ''],
        ['Squares', 19, 12, 24, 45, 17, 20, 50, '']
    ]);

    // Set chart options
    var options_bar_stacked = {
        height: 400,
        fontSize: 12,
        colors: ['#f5bd05', '#05c9f5', '#edf505', '#6df505', '#19c3f7', '#f78c19', '#f72b19'],
        chartArea: {
            left: '5%',
            width: '90%',
            height: 350
        },
        isStacked: true,
        hAxis: {
            gridlines: {
                color: '#e9e9e9',
                count: 10
            },
            minValue: 0
        },
        legend: {
            position: 'top',
            alignment: 'center',
            textStyle: {
                fontSize: 12
            }
        }
    };

    // Instantiate and draw our chart, passing in some options.
    var bar = new google.visualization.BarChart(document.getElementById('stacked-bar-chart'));
    bar.draw(data, options_bar_stacked);

    }


// Resize chart
// ------------------------------

$(function () {

    // Resize chart on menu width change and window resize
    $(window).on('resize', resize);
    $(".menu-toggle").on('click', resize);

    // Resize function
    function resize() {
        drawBarStacked();
    }
});
    </script>
    
}


